#include<stdio.h>
#include<stdlib.h>
typedef struct node//链表节点的定义
{
   int data;//一个整型变量，用于存储节点的数据
   struct node *next;//一个指向同类型结构体的指针，
   //用于指向链表中的下一个节点
}ListNode;
typedef int DataType;//定义数据类型
ListNode *CreateList()//创建链表
//创建链表
{
    char ch;//声明了一个字符变量 ch，用于存储从输入中读取的单个字符
    ListNode *head=(ListNode *)malloc(sizeof(ListNode));
    //声明了一个指向 ListNode 的指针 head，
    //并使用 malloc 动态分配内存来创建一个新的 ListNode。
    //生成头结点
    ListNode *s,*r;
    r=head;//将指针 r 指向链表的头结点。
    while((ch=getchar())!='\n')
    //使用 getchar 函数从标准输入读取一个字符，并将其存储在变量 ch 中。
    //然后检查该字符是否是换行符（'\n'）。如果不是换行符，则继续循环。
    {
        s=(ListNode *)malloc(sizeof(ListNode));//生成新节点
        s->data=ch;//将读入的数据放入新结点的数据域中
        r->next=s;//将新节点的指针设置为当前节点 r 的下一个节点。
        r=s;//将当前节点指针移动到新节点
    }
    r->next=NULL;//设置最后一个节点的下一个节点为 NULL，表示链表的结束
    return head;//返回链表的头结点
}

//插入算法
//在带头指针的单链表head中查找第i个结点
ListNode* GetNode(ListNode *head,int i)
{
    int j;
    ListNode *p;
    p=head;j=0;//从头结点开始扫描
    while (p->next&&j<i)//顺指针向后扫描，直到p->next为null或者i=j为止
    {
        p=p->next;
        j++;
    }
    if (i==j)
    {
        return p;//找到了第i个结点
    }
    else
        return NULL;//当i<0或者i>n时，找不到第i个结点
}
//将值为x的新结点插入到带头指针的单链表head中第i哥结点的位置上
void InsertList(ListNode *head,DataType x,int i)
{
    ListNode *p,*s;
    p=GetNode(head,i-1);
    if (p==NULL)
    {
        printf('位置错误');
    }
    s=(ListNode *)malloc(sizeof(ListNode));
    s->data=x;
    s->next=p->next;
    p->next=s;
}
//删除算法
void DeleteList(ListNode *head,int i)
{   //删除带头指针的单链表head中的第i个结点
    ListNode *p,*r;
    p=GetNode(head,i-1);//查找第i-1个结点
    if (p==NULL||p->next==NULL)//如果第i-1个结点不存在或者第i个结点不存在
    {
        printf('位置错误');
    }
    r=p->next;//r指向第i个结点
    r->next=r->next;//从链表中删除结点r
    free(r);//释放结点r的存储空间
}

