//# [NOIP2011 提高组] 铺地毯
// ## 题目描述
// 为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 $n$ 张地毯，编号从 $1$ 到 $n$。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。
// 地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。
// ## 输入格式
// 输入共 $n + 2$ 行。
// 第一行，一个整数 $n$，表示总共有 $n$ 张地毯。
// 接下来的 $n$ 行中，第 $i+1$ 行表示编号 $i$ 的地毯的信息，包含四个整数 $a ,b ,g ,k$，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 $(a, b)$ 以及地毯在 $x$ 轴和 $y$ 轴方向的长度。
// 第 $n + 2$ 行包含两个整数 $x$ 和 $y$，表示所求的地面的点的坐标 $(x, y)$。
#include<bits/stdc++.h>
using namespace std;

// 定义地毯的结构体，包括左下角的坐标（a，b）以及在x轴和y轴方向的长度（g，k）
struct Carpet {
    long long int a, b, g, k;
} carpets[10005];//创建一个数组，相当于可以存储10005张地毯的信息

int main() {
    long long int n, x, y;
    cin >> n; // 输入地毯的数量
    for (int i = 1; i <= n; i++) {
        // 输入每张地毯的信息
        cin >> carpets[i].a >> carpets[i].b >> carpets[i].g >> carpets[i].k;
    }
    cin >> x >> y; // 输入要查询的点的坐标
    for (int i = n; i >= 1; i--) {
        // 从最后一张地毯开始，检查每张地毯是否覆盖了指定的点
        if (x >= carpets[i].a && x <= carpets[i].a + carpets[i].g && y >= carpets[i].b && y <= carpets[i].b + carpets[i].k) {
            cout << i; // 如果找到了覆盖该点的地毯，输出其编号并结束程序
            return 0;
        }
    }
    cout << -1; // 如果没有找到覆盖该点的地毯，输出-1
    return 0;
}